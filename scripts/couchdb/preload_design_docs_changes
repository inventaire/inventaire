#!/usr/bin/env node

// Preloading design docs so that when design docs are
// effectively updated on server reboot the views are already indexed
// See https://docs.couchdb.org/en/3.2.0/best-practices/views.html#deploying-a-view-change-in-a-live-environment

require('module-alias/register')
const CONFIG = require('config')
const __ = CONFIG.universalPath
const _ = require('builders/utils')
const designDocFolder = __.path('db', 'couchdb/design_docs')
const dbsList = require('db/couchdb/list')
const initCouchdb = require('db/couchdb/init')
const { symlink } = require('fs').promises
const dbBaseUrl = CONFIG.db.fullHost()
const requests_ = require('lib/requests')
const { wait } = require('lib/promises')

const designDocsNames = Object.values(dbsList).flat()

const createDesignDocSymbolicLink = async designDocName => {
  try {
    await symlink(`${designDocFolder}/${designDocName}.js`, `${designDocFolder}/${designDocName}_preload.js`)
  } catch (err) {
    if (err.code !== 'EEXIST') throw err
  }
}

const createDesignDocsSymbolicLinks = async () => {
  await Promise.all(designDocsNames.map(createDesignDocSymbolicLink))
}

let count = 0
const waitForActiveTasksToBeDone = async () => {
  const activeTasks = await requests_.get(`${dbBaseUrl}/_active_tasks`)
  if (activeTasks.length > 0) {
    _.info(formatTasks(activeTasks), `waiting for active tasks (${++count})`)
    await wait(2000)
    return waitForActiveTasksToBeDone()
  }
}
const formatTasks = tasks => tasks.map(formatTask).join('\n')

const formatTask = task => {
  const { type, process_status: processStatus, database, design_document: designDocument, changes_done: changesDone, total_changes: totalChanges } = task
  let { started_on: startedOn, updated_on: updatedOn } = task
  startedOn = toTime(startedOn)
  updatedOn = toTime(updatedOn)
  return `${database} ${designDocument} ${type} ${changesDone}/${totalChanges} (${processStatus}, start: ${startedOn}, updated: ${updatedOn})`
}

const toTime = secondEpoch => new Date(secondEpoch * 1000).toISOString().split(/[T.]/)[1]

createDesignDocsSymbolicLinks()
.then(async () => {
  await initCouchdb({ preload: true })
  await waitForActiveTasksToBeDone()
  _.success('done')
})

.catch(console.error)
