#!/usr/bin/env bash

set -eu

source ./scripts/dumps/lib/utils.sh

db_param(){
  node -p "require('config').db.$1"
}

# Getting the database parameters to get ready for couchdb-dump
hostname=$(db_param hostname)
port=$(db_param port)
username=$(db_param username)
password=$(db_param password)
db_name='entities-prod'
root_cwd="$(pwd)"

cd "$folder"
rm -f ./latest
ln -sr "./${today}" latest

raw_db_json_filename="${db_name}.json"
output_file="${today_folder}/${raw_db_json_filename}"

# Dumping the database only if the file doesn't already exist,
# which means that this file should be deleted to start a new dump version
[ -f "$output_file" ] && echo "$raw_db_json_filename already exist" || {
  couchdb-backup -b -H "$hostname" -P "$port" -u "$username" -p "$password" -d "$db_name" -f "$output_file"
}

filtered_dump_filename="entities.ndjson"
filtered_dump_filename_with_seeds="entities_with_seeds.ndjson"
redirections_dump="redirections.ndjson"
drop_comma(){ sed 's/,$//' ; }

# NDJSON dumps
cd "$today_folder"

echo "filtering $raw_db_json_filename redirections into ${redirections_dump}"
cat "$raw_db_json_filename" | grep '"type":"entity","redirect":' | drop_comma > "$redirections_dump"

echo "filtering $raw_db_json_filename with seeds into $filtered_dump_filename_with_seeds"
cat "$raw_db_json_filename" |
  # Filter-out removed:placeholders
  grep '"type":"entity"' |
  # Filter-out redirections
  grep -v "redirect" |
  # Filter-out entities empty canvas (entity creation process failure)
  grep -v '"version":1' |
  drop_comma > "${filtered_dump_filename_with_seeds}"

echo "filtering $raw_db_json_filename without seeds into $filtered_dump_filename"
cat "${filtered_dump_filename_with_seeds}" |
  # Filter-out entities that are likely to be unedited data seeds
  grep -v '"version":2' > "$filtered_dump_filename"

# TTL dump
# We need to return to the root directory so that convert_ndjson_dump_to_ttl.js
# can find the CONFIG
cd $root_cwd
turtle_filename="entities.ttl"
turtle_with_seeds_filepath="entities_with_seeds.ttl"
echo "converting to turtle: $turtle_filename $turtle_with_seeds_filepath"
cat "${today_folder}/${filtered_dump_filename}" | ./scripts/dumps/convert_ndjson_dump_to_ttl.js > "${today_folder}/${turtle_filename}"
cat "${today_folder}/${filtered_dump_filename_with_seeds}" | ./scripts/dumps/convert_ndjson_dump_to_ttl.js > "${today_folder}/${turtle_with_seeds_filepath}"

validate_ttl(){
  file_path_hash=$(echo $1 | md5sum | awk '{printf $1}')
  log_file="/tmp/ttl_validation_logs_${file_path_hash}"
  # TurtleValidator ttl always exits with 0, thus the need to parse its logs
  # to exit with an error code if an error was detected
  # see https://github.com/IDLabResearch/TurtleValidator/issues/7
  ttl $1 | tee $log_file
  cat $log_file | grep '{ Error' > /dev/null && exit 1
}

validate_ttl "${today_folder}/${turtle_filename}" && echo 'validated'
validate_ttl "${today_folder}/${turtle_with_seeds_filepath}" && echo 'validated'

cd "$today_folder"
rm "$output_file"

echo "compressing results"
gzip -9f *json *ttl

echo "done"
