#!/usr/bin/env node

// This cleanup script does several things:
// - Delete the design docs created in CouchDB by ./preload_design_docs_changes
// - Remove the symbolic links created in designDocFolder by ./preload_design_docs_changes
// - Trigger view cleanups to recover the disk space used by now outdated view indexes
//   See https://docs.couchdb.org/en/3.1.2/maintenance/compaction.html#compact-views-cleanup

require('module-alias/register')
const CONFIG = require('config')
const __ = CONFIG.universalPath
const _ = require('builders/utils')
const designDocFolder = __.path('db', 'couchdb/design_docs')
const { shellExec } = require('scripts/scripts_utils')
const requests_ = require('lib/requests')
const getDatabasesNames = require('./lib/get_databases_names')
const { waitForActiveTasksToBeDone } = require('./lib/active_tasks')
const dbsList = require('db/couchdb/list')
const { suffix } = CONFIG.db
const dbsNames = getDatabasesNames(suffix)
const dbBaseUrl = CONFIG.db.fullHost()

const deleteDesignDocsSymbolicLinks = async () => {
  await shellExec(`rm -f ${designDocFolder}/*_preload.js`)
}

const deleteDesignDocs = async () => {
  const entries = Object.keys(dbsList)
    .map(dbBaseName => dbsList[dbBaseName].map(designDocBaseName => [ dbBaseName, designDocBaseName ]))
    .flat()
  return Promise.all(entries.map(deleteDesignDoc))
}

const deleteDesignDoc = async ([ dbBaseName, designDocBaseName ]) => {
  const dbName = CONFIG.db.name(dbBaseName)
  const docUrl = `${dbBaseUrl}/${dbName}/_design/${designDocBaseName}_preload`
  try {
    const { _rev } = await requests_.get(docUrl)
    await requests_.delete(`${docUrl}?rev=${_rev}`)
  } catch (err) {
    if (err.statusCode !== 404) throw err
  }
}

const removeDatabaseOutdatedViewIndexes = async dbName => {
  return requests_.post(`${dbBaseUrl}/${dbName}/_view_cleanup`)
}

Promise.all([
  deleteDesignDocs(),
  deleteDesignDocsSymbolicLinks(),
])
.then(async () => {
  await Promise.all(dbsNames.map(removeDatabaseOutdatedViewIndexes))
  await waitForActiveTasksToBeDone()
  _.success('done')
})
.catch(console.error)
