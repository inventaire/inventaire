// A middleware to catch other middlewares errors and repackage them
import parseUrl from 'parseurl'
import { logoutRedirect } from '#controllers/auth/connection'
import { errorHandler } from '#lib/error/error_handler'
import { bundleError } from '#lib/error/pre_filled'
import type { Req, Res } from '#types/server'
import type { NextFunction } from 'express'
// in JSON and with more readable error reports

// /!\ DO NOT REMOVE THE "next" CALLBACK, even if not used:
// "Error-handling middleware always takes four arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you donâ€™t need to use the next object, you must specify it to maintain the signature. Otherwise, the next object will be interpreted as regular middleware and will fail to handle errors." http://expressjs.com/en/guide/using-middleware.html#middleware.error-handling
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function middlewareErrorHandler (err: Error, req: Req, res: Res, next: NextFunction) {
  // Repackaging errors generated by body-parser
  if ((err.name === 'SyntaxError') && err.message.startsWith('Unexpected token')) {
    bundleError(req, res, 'invalid JSON body', 400)
  } else if (err.name === 'SessionError') {
    const { pathname } = parseUrl(req)
    logoutRedirect(`/login?redirect=${pathname}`, req, res)
  } else {
    errorHandler(req, res, err)
  }
}
